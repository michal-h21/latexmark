\ProvidesPackage{latexmark}

\RequirePackage{luatexbase}

\RequirePackage{kvoptions}
\DeclareStringOption{extensions}
\DeclareStringOption{template}
\DeclareBoolOption{document}
\ProcessKeyvalOptions*

\directlua{%
  local extensionstring = "\latexmark@extensions"
  local extensions = {}
  for _,ex in ipairs(string.explode(extensionstring,",")) do
    local ex = ex:gsub(" ","")
    print("use extension", ex)
    extensions[ex] = true
  end
  % if no extensions are specified, delete the table, so default extensions
  % could be used
  latexmark = require "latexmark"
  latexmark.init(extensions)
  latexmark.save_template("\latexmark@template")
}

\newcommand\latexmark@start{\directlua{luatexbase.add_to_callback("process_input_buffer",latexmark.callback,"latexmark")}}
\newcommand\latexmark@end{\directlua{%
    luatexbase.remove_from_callback("process_input_buffer", "latexmark")
    latexmark.process()
}}

\iflatexmark@document
\AtBeginDocument{%
  \latexmark@start
  \directlua{latexmark.end_env = '\noexpand\\end{document}'}
}
\AtEndDocument{\latexmark@end}
\fi

\newenvironment{latexmark}
{\latexmark@start}
{\latexmark@end}

\newcommand\markdownfile[1]{%
  \directlua{%
    local f = io.open("\luatexluaescapestring{#1}","r")
    if not f then 
      print('latexmark warning: file "#1" cannot be found') 
    else
      local lines = f:read("*all")
      latexmark.callback(lines)
      f:close()
      latexmark.process()
    end
  }
}

\endinput

